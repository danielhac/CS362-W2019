----------------- Test: 0, Card: great_hall ----------------
----------------- Test: 1, Card: great_hall ----------------
----------------- Test: 2, Card: great_hall ----------------
----------------- Test: 3, Card: great_hall ----------------
----------------- Test: 4, Card: great_hall ----------------
----------------- Test: 5, Card: great_hall ----------------
----------------- Test: 6, Card: great_hall ----------------
----------------- Test: 7, Card: great_hall ----------------
----------------- Test: 8, Card: great_hall ----------------
----------------- Test: 9, Card: great_hall ----------------
----------------- Test: 10, Card: great_hall ----------------
----------------- Test: 11, Card: great_hall ----------------
----------------- Test: 12, Card: great_hall ----------------
----------------- Test: 13, Card: great_hall ----------------
----------------- Test: 14, Card: great_hall ----------------
----------------- Test: 15, Card: great_hall ----------------
----------------- Test: 16, Card: great_hall ----------------
----------------- Test: 17, Card: great_hall ----------------
----------------- Test: 18, Card: great_hall ----------------
----------------- Test: 19, Card: great_hall ----------------
----------------- Test: 20, Card: great_hall ----------------
----------------- Test: 21, Card: great_hall ----------------
----------------- Test: 22, Card: great_hall ----------------
----------------- Test: 23, Card: great_hall ----------------
----------------- Test: 24, Card: great_hall ----------------
----------------- Test: 25, Card: great_hall ----------------
----------------- Test: 26, Card: great_hall ----------------
----------------- Test: 27, Card: great_hall ----------------
----------------- Test: 28, Card: great_hall ----------------
----------------- Test: 29, Card: great_hall ----------------
----------------- Test: 30, Card: great_hall ----------------
----------------- Test: 31, Card: great_hall ----------------
----------------- Test: 32, Card: great_hall ----------------
----------------- Test: 33, Card: great_hall ----------------
----------------- Test: 34, Card: great_hall ----------------
----------------- Test: 35, Card: great_hall ----------------
----------------- Test: 36, Card: great_hall ----------------
----------------- Test: 37, Card: great_hall ----------------
----------------- Test: 38, Card: great_hall ----------------
----------------- Test: 39, Card: great_hall ----------------
Failed -- hand count != expected
Failed -- deck count != expected
----------------- Test: 40, Card: great_hall ----------------
----------------- Test: 41, Card: great_hall ----------------
----------------- Test: 42, Card: great_hall ----------------
----------------- Test: 43, Card: great_hall ----------------
----------------- Test: 44, Card: great_hall ----------------
----------------- Test: 45, Card: great_hall ----------------
----------------- Test: 46, Card: great_hall ----------------
----------------- Test: 47, Card: great_hall ----------------
----------------- Test: 48, Card: great_hall ----------------
----------------- Test: 49, Card: great_hall ----------------
----------------- Test: 50, Card: great_hall ----------------
----------------- Test: 51, Card: great_hall ----------------
----------------- Test: 52, Card: great_hall ----------------
----------------- Test: 53, Card: great_hall ----------------
----------------- Test: 54, Card: great_hall ----------------
----------------- Test: 55, Card: great_hall ----------------
----------------- Test: 56, Card: great_hall ----------------
----------------- Test: 57, Card: great_hall ----------------
----------------- Test: 58, Card: great_hall ----------------
----------------- Test: 59, Card: great_hall ----------------
----------------- Test: 60, Card: great_hall ----------------
Failed -- hand count != expected
Failed -- deck count != expected
----------------- Test: 61, Card: great_hall ----------------
----------------- Test: 62, Card: great_hall ----------------
----------------- Test: 63, Card: great_hall ----------------
----------------- Test: 64, Card: great_hall ----------------
----------------- Test: 65, Card: great_hall ----------------
----------------- Test: 66, Card: great_hall ----------------
----------------- Test: 67, Card: great_hall ----------------
----------------- Test: 68, Card: great_hall ----------------
----------------- Test: 69, Card: great_hall ----------------
----------------- Test: 70, Card: great_hall ----------------
----------------- Test: 71, Card: great_hall ----------------
----------------- Test: 72, Card: great_hall ----------------
----------------- Test: 73, Card: great_hall ----------------
Failed -- hand count != expected
Failed -- deck count != expected
----------------- Test: 74, Card: great_hall ----------------
----------------- Test: 75, Card: great_hall ----------------
----------------- Test: 76, Card: great_hall ----------------
----------------- Test: 77, Card: great_hall ----------------
----------------- Test: 78, Card: great_hall ----------------
----------------- Test: 79, Card: great_hall ----------------
----------------- Test: 80, Card: great_hall ----------------
----------------- Test: 81, Card: great_hall ----------------
----------------- Test: 82, Card: great_hall ----------------
----------------- Test: 83, Card: great_hall ----------------
Failed -- hand count != expected
Failed -- deck count != expected
----------------- Test: 84, Card: great_hall ----------------
----------------- Test: 85, Card: great_hall ----------------
----------------- Test: 86, Card: great_hall ----------------
----------------- Test: 87, Card: great_hall ----------------
----------------- Test: 88, Card: great_hall ----------------
----------------- Test: 89, Card: great_hall ----------------
----------------- Test: 90, Card: great_hall ----------------
----------------- Test: 91, Card: great_hall ----------------
----------------- Test: 92, Card: great_hall ----------------
----------------- Test: 93, Card: great_hall ----------------
----------------- Test: 94, Card: great_hall ----------------
----------------- Test: 95, Card: great_hall ----------------
----------------- Test: 96, Card: great_hall ----------------
----------------- Test: 97, Card: great_hall ----------------
----------------- Test: 98, Card: great_hall ----------------
----------------- Test: 99, Card: great_hall ----------------
File 'dominion.c'
Lines executed:44.91% of 648
Branches executed:42.65% of 415
Taken at least once:36.14% of 415
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:54
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 9663 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
     9663:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 3%
branch  1 taken 97%
      250:   10:    return 1;
     9413:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 37%
branch  1 taken 63%
     3453:   12:    return -1;
     5960:   13:  return 0;
     9663:   14:}
        -:   15:
function newGame called 14 returned 100% blocks executed 100%
        -:   16:struct gameState* newGame() {
       28:   17:  struct gameState* g = malloc(sizeof(struct gameState));
       14:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 8 returned 100% blocks executed 100%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        8:   23:  int* k = malloc(10 * sizeof(int));
        8:   24:  k[0] = k1;
        8:   25:  k[1] = k2;
        8:   26:  k[2] = k3;
        8:   27:  k[3] = k4;
        8:   28:  k[4] = k5;
        8:   29:  k[5] = k6;
        8:   30:  k[6] = k7;
        8:   31:  k[7] = k8;
        8:   32:  k[8] = k9;
        8:   33:  k[9] = k10;
        8:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 252 returned 100% blocks executed 97%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      252:   44:  SelectStream(1);
      252:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      492:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 95%
branch  1 taken 5%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
       12:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      240:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     5280:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
    52800:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
    45600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    24000:   65:        }
     2400:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      240:   73:  if (numPlayers == 2)
branch  0 taken 48%
branch  1 taken 52%
        -:   74:    {
      115:   75:      state->supplyCount[curse] = 10;
      115:   76:    }
      125:   77:  else if (numPlayers == 3)
branch  0 taken 57%
branch  1 taken 43%
        -:   78:    {
       71:   79:      state->supplyCount[curse] = 20;
       71:   80:    }
        -:   81:  else
        -:   82:    {
       54:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      240:   87:  if (numPlayers == 2)
branch  0 taken 48%
branch  1 taken 52%
        -:   88:    {
      115:   89:      state->supplyCount[estate] = 8;
      115:   90:      state->supplyCount[duchy] = 8;
      115:   91:      state->supplyCount[province] = 8;
      115:   92:    }
        -:   93:  else
        -:   94:    {
      125:   95:      state->supplyCount[estate] = 12;
      125:   96:      state->supplyCount[duchy] = 12;
      125:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      240:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      240:  102:  state->supplyCount[silver] = 40;
      240:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    10080:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
    79200:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
    37200:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     4767:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 1%
branch  3 taken 99%
        -:  114:		{
       66:  115:		  if (numPlayers == 2){ 
branch  0 taken 76%
branch  1 taken 24%
       50:  116:		    state->supplyCount[i] = 8; 
       50:  117:		  }
       16:  118:		  else{ state->supplyCount[i] = 12; }
       66:  119:		}
        -:  120:	      else
        -:  121:		{
     2334:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     2400:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    34800:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    34800:  130:	}
        -:  131:
     4800:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1798:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27%
        -:  139:    {
      659:  140:      state->deckCount[i] = 0;
     5272:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
     1977:  143:	  state->deck[i][j] = estate;
     1977:  144:	  state->deckCount[i]++;
     1977:  145:	}
    10544:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
     4613:  148:	  state->deck[i][j] = copper;
     4613:  149:	  state->deckCount[i]++;		
     4613:  150:	}
      659:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1798:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27%
        -:  155:    {
      659:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
      659:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1798:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      659:  166:      state->handCount[i] = 0;
      659:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
      659:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    13440:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
     6480:  178:      state->embargoTokens[i] = 0;
     6480:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      240:  182:  state->outpostPlayed = 0;
      240:  183:  state->phase = 0;
      240:  184:  state->numActions = 1;
      240:  185:  state->numBuys = 1;
      240:  186:  state->playedCardCount = 0;
      240:  187:  state->whoseTurn = 0;
      240:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     2880:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
     1200:  193:    drawCard(state->whoseTurn, state);
     1200:  194:  }
        -:  195:
      240:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      240:  198:  return 0;
      252:  199:}
        -:  200:
function shuffle called 856 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      856:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      856:  209:  if (state->deckCount[player] < 1)
branch  0 taken 18%
branch  1 taken 82%
      157:  210:    return -1;
      699:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    14942:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
     6772:  215:    card = floor(Random() * state->deckCount[player]);
     6772:  216:    newDeck[newDeckPos] = state->deck[player][card];
     6772:  217:    newDeckPos++;
    47466:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
    16961:  219:      state->deck[player][i] = state->deck[player][i+1];
    16961:  220:    }
     6772:  221:    state->deckCount[player]--;
        -:  222:  }
    14942:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
     6772:  224:    state->deck[player][i] = newDeck[i];
     6772:  225:    state->deckCount[player]++;
     6772:  226:  }
        -:  227:
      699:  228:  return 0;
      856:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 9000 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
     9000:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 4 returned 100% blocks executed 100%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        4:  326:  int count = 0;
        -:  327:
       48:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  329:    {
       26:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 30%
branch  1 taken 70%
       20:  331:    }
        -:  332:
       48:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  334:    {
       26:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 30%
branch  1 taken 70%
       20:  336:    }
        -:  337:
       48:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  339:    {
       26:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 30%
branch  1 taken 70%
       20:  341:    }
        -:  342:
        4:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 9333 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
     9333:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 32 returned 100% blocks executed 100%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       32:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      384:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17%
      160:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      160:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      160:  359:  }
       32:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       32:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 75%
branch  1 taken 25%
       24:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       24:  365:  }
        -:  366:  else{
        8:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       32:  370:  state->outpostPlayed = 0;
       32:  371:  state->phase = 0;
       32:  372:  state->numActions = 1;
       32:  373:  state->coins = 0;
       32:  374:  state->numBuys = 1;
       32:  375:  state->playedCardCount = 0;
       32:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      384:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
      160:  381:    drawCard(state->whoseTurn, state);//Draw a card
      160:  382:  }
        -:  383:
        -:  384:  //Update money
       32:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       32:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0){
branch  0 never executed
branch  1 never executed
    #####:  396:    return 1;
        -:  397:  }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++){
branch  0 never executed
branch  1 never executed
    #####:  402:    if (state->supplyCount[i] == 0){
branch  0 never executed
branch  1 never executed
    #####:  403:	    j++;
    #####:  404:	  }
    #####:  405:  }
    #####:  406:  if ( j >= 3){
branch  0 never executed
branch  1 never executed
    #####:  407:    return 1;
        -:  408:  }
        -:  409:
    #####:  410:  return 0;
    #####:  411:}
        -:  412:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  413:int scoreFor (int player, struct gameState *state) {
        -:  414:
        -:  415:  int i;
    #####:  416:  int score = 0;
        -:  417:  //score from hand
    #####:  418:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  419:    {
    #####:  420:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  421:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  422:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  423:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  424:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  426:    }
        -:  427:
        -:  428:  //score from discard
    #####:  429:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  430:    {
    #####:  431:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  437:    }
        -:  438:
        -:  439:  //score from deck
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  441:    {
    #####:  442:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  448:    }
        -:  449:
    #####:  450:  return score;
        -:  451:}
        -:  452:
function getWinners called 0 returned 0% blocks executed 0%
        -:  453:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  454:  int i;	
        -:  455:  int j;
        -:  456:  int highScore;
        -:  457:  int currentPlayer;
        -:  458:
        -:  459:  //get score for each player
    #####:  460:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  461:    {
        -:  462:      //set unused player scores to -9999
    #####:  463:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  464:	{
    #####:  465:	  players[i] = -9999;
    #####:  466:	}
        -:  467:      else
        -:  468:	{
    #####:  469:	  players[i] = scoreFor (i, state);
        -:  470:	}
    #####:  471:    }
        -:  472:
        -:  473:  //find highest score
    #####:  474:  j = 0;
    #####:  475:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  476:    {
    #####:  477:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  478:	{
    #####:  479:	  j = i;
    #####:  480:	}
    #####:  481:    }
    #####:  482:  highScore = players[j];
        -:  483:
        -:  484:  //add 1 to players who had less turns
    #####:  485:  currentPlayer = whoseTurn(state);
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  487:    {
    #####:  488:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  489:	{
    #####:  490:	  players[i]++;
    #####:  491:	}
    #####:  492:    }
        -:  493:
        -:  494:  //find new highest score
    #####:  495:  j = 0;
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  497:    {
    #####:  498:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  499:	{
    #####:  500:	  j = i;
    #####:  501:	}
    #####:  502:    }
    #####:  503:  highScore = players[j];
        -:  504:
        -:  505:  //set winners in array to 1 and rest to 0
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  507:    {
    #####:  508:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  509:	{
    #####:  510:	  players[i] = 1;
    #####:  511:	}
        -:  512:      else
        -:  513:	{
    #####:  514:	  players[i] = 0;
        -:  515:	}
    #####:  516:    }
        -:  517:
    #####:  518:  return 0;
        -:  519:}
        -:  520:
function drawCard called 2008 returned 100% blocks executed 100%
        -:  521:int drawCard(int player, struct gameState *state)
        -:  522:{	int count;
        -:  523:  int deckCounter;
     2008:  524:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9%
branch  1 taken 91%
        -:  525:    
        -:  526:    //Step 1 Shuffle the discard pile back into a deck
        -:  527:    int i;
        -:  528:    //Move discard to deck
      728:  529:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 50%
branch  1 taken 50%
      182:  530:      state->deck[player][i] = state->discard[player][i];
      182:  531:      state->discard[player][i] = -1;
      182:  532:    }
        -:  533:
      182:  534:    state->deckCount[player] = state->discardCount[player];
      182:  535:    state->discardCount[player] = 0;//Reset discard
        -:  536:
        -:  537:    //Shufffle the deck
      182:  538:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  539:   
        -:  540:    if (DEBUG){//Debug statements
        -:  541:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  542:    }
        -:  543:    
      182:  544:    state->discardCount[player] = 0;
        -:  545:
        -:  546:    //Step 2 Draw Card
      182:  547:    count = state->handCount[player];//Get current player's hand count
        -:  548:    
        -:  549:    if (DEBUG){//Debug statements
        -:  550:      printf("Current hand count: %d\n", count);
        -:  551:    }
        -:  552:    
      182:  553:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  554:
      182:  555:    if (deckCounter == 0)
branch  0 taken 78%
branch  1 taken 22%
      142:  556:      return -1;
        -:  557:
       40:  558:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       40:  559:    state->deckCount[player]--;
       40:  560:    state->handCount[player]++;//Increment hand count
       40:  561:  }
        -:  562:
        -:  563:  else{
     1826:  564:    int count = state->handCount[player];//Get current hand count for player
        -:  565:    int deckCounter;
        -:  566:    if (DEBUG){//Debug statements
        -:  567:      printf("Current hand count: %d\n", count);
        -:  568:    }
        -:  569:
     1826:  570:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1826:  571:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1826:  572:    state->deckCount[player]--;
     1826:  573:    state->handCount[player]++;//Increment hand count
        -:  574:  }
        -:  575:
     1866:  576:  return 0;
     2008:  577:}
        -:  578:
function getCost called 216 returned 100% blocks executed 96%
        -:  579:int getCost(int cardNumber)
        -:  580:{
      216:  581:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  582:    {
        -:  583:    case curse:
        8:  584:      return 0;
        -:  585:    case estate:
        8:  586:      return 2;
        -:  587:    case duchy:
        8:  588:      return 5;
        -:  589:    case province:
        8:  590:      return 8;
        -:  591:    case copper:
        8:  592:      return 0;
        -:  593:    case silver:
        8:  594:      return 3;
        -:  595:    case gold:
        8:  596:      return 6;
        -:  597:    case adventurer:
        8:  598:      return 6;
        -:  599:    case council_room:
        8:  600:      return 5;
        -:  601:    case feast:
        8:  602:      return 4;
        -:  603:    case gardens:
        8:  604:      return 4;
        -:  605:    case mine:
        8:  606:      return 5;
        -:  607:    case remodel:
        8:  608:      return 4;
        -:  609:    case smithy:
        8:  610:      return 4;
        -:  611:    case village:
        8:  612:      return 3;
        -:  613:    case baron:
        8:  614:      return 4;
        -:  615:    case great_hall:
        8:  616:      return 3;
        -:  617:    case minion:
        8:  618:      return 5;
        -:  619:    case steward:
        8:  620:      return 3;
        -:  621:    case tribute:
        8:  622:      return 5;
        -:  623:    case ambassador:
        8:  624:      return 3;
        -:  625:    case cutpurse:
        8:  626:      return 4;
        -:  627:    case embargo: 
        8:  628:      return 2;
        -:  629:    case outpost:
        8:  630:      return 5;
        -:  631:    case salvager:
        8:  632:      return 4;
        -:  633:    case sea_hag:
        8:  634:      return 4;
        -:  635:    case treasure_map:
        8:  636:      return 4;
        -:  637:    }
        -:  638:	
    #####:  639:  return -1;
        -:  640:  
      216:  641:}
        -:  642:
        -:  643:
        -:  644:/*
        -:  645:*   ADVENTURER EFFECT REFACTOR
        -:  646:*/
function adventurerEffect called 13 returned 100% blocks executed 93%
        -:  647:void adventurerEffect(int drawntreasure, int currentPlayer, int nextPlayer, struct gameState *state, int* temphand){
       13:  648:  int z=0, cardDrawn;
       90:  649:  while(drawntreasure<2){
branch  0 taken 71%
branch  1 taken 29%
       32:  650:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 47%
branch  1 taken 53%
       15:  651:      shuffle(currentPlayer, state);
       15:  652:    }
       32:  653:    drawCard(currentPlayer, state);
       32:  654:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       44:  655:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 19%
branch  1 taken 81%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
       26:  656:      drawntreasure++;
        -:  657:    else{
        6:  658:      temphand[z]=cardDrawn;
        6:  659:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        6:  660:      z++;
        -:  661:    }
        -:  662:  }
       26:  663:  while(z-1==0){     //***BUG: should be 'z-1>=0'***//
branch  0 taken 0%
branch  1 taken 100%
    #####:  664:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  665:    z=z-1;
        -:  666:  }
       13:  667:}
        -:  668:
        -:  669:/*
        -:  670:*   SMITHY EFFECT REFACTOR
        -:  671:*/
function smithyEffect called 126 returned 100% blocks executed 100%
        -:  672:void smithyEffect(int currentPlayer, int handPos, struct gameState *state){
        -:  673:  //+3 Cards
     1260:  674:  for (int i = 0; i <= 3; i++){             //***BUG: should be 'i < 3'***//
branch  0 taken 80%
branch  1 taken 20%
      504:  675:    drawCard(currentPlayer, state);
      504:  676:  }
      126:  677:}
        -:  678:
        -:  679:/*
        -:  680:*   BARON EFFECT REFACTOR
        -:  681:*/
function baronEffect called 0 returned 0% blocks executed 0%
        -:  682:void baronEffect(int choice1, int currentPlayer, struct gameState *state){
    #####:  683:  state->numBuys++;//Increase buys by 1!
    #####:  684:  if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  685:    int p = 0;//Iterator for hand!
    #####:  686:    int card_not_discarded = 1;//Flag for discard set!
    #####:  687:    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  688:      if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  689:        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  690:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  691:        state->discardCount[currentPlayer]++;
    #####:  692:        for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  693:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  694:        }
    #####:  695:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  696:        state->handCount[currentPlayer]--;
    #####:  697:        card_not_discarded = 0;//Exit the loop
    #####:  698:      }
    #####:  699:      else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  700:        if(DEBUG) {
        -:  701:          printf("No estate cards in your hand, invalid choice\n");
        -:  702:          printf("Must gain an estate if there are any\n");
        -:  703:        }
    #####:  704:        if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  705:          gainCard(estate, state, 0, currentPlayer);
    #####:  706:          state->supplyCount[estate]--;//Decrement estates
    #####:  707:            if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  708:              isGameOver(state);
    #####:  709:            }
    #####:  710:        }
    #####:  711:        card_not_discarded = 0;//Exit the loop
    #####:  712:      } else{
    #####:  713:        p++;//Next card
        -:  714:      }
        -:  715:    }
    #####:  716:  } else{
    #####:  717:      if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  718:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  719:        state->supplyCount[estate]--;//Decrement Estates
    #####:  720:        if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  721:          isGameOver(state);
    #####:  722:        }
    #####:  723:      }
        -:  724:  }
    #####:  725:}
        -:  726:
        -:  727:/*
        -:  728:*   CUTPURSE EFFECT REFACTOR
        -:  729:*/
function cutPurseEffect called 9 returned 100% blocks executed 94%
        -:  730:void cutPurseEffect(int currentPlayer, int handPos, struct gameState *state){
        9:  731:  updateCoins(currentPlayer, state, 2);
       90:  732:  for (int i = 0; i < state->numPlayers; i++){
branch  0 taken 80%
branch  1 taken 20%
       36:  733:    if (i != currentPlayer){
branch  0 taken 75%
branch  1 taken 25%
       54:  734:      for (int j = 0; j < state->handCount[i]; j++){
branch  0 taken 67%
branch  1 taken 33%
       18:  735:        if (state->hand[i][j] == copper){
branch  0 taken 33%
branch  1 taken 67%
        6:  736:          discardCard(j, i, state, 0);
        6:  737:          break;
        -:  738:        }
        -:  739:        else {     //***BUG: should be 'if (j == state->handCount[i]) not 'else' ***//
      144:  740:          for (int k = 0; k < state->handCount[i]; k++){
branch  0 taken 83%
branch  1 taken 17%
        -:  741:            if (DEBUG)
        -:  742:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
       60:  743:          }	
       12:  744:          break;
        -:  745:        }		
        -:  746:      }	
       27:  747:    }
       36:  748:  }	
        9:  749:}
        -:  750:
        -:  751:/*
        -:  752:*   MINION EFFECT REFACTOR
        -:  753:*/
function minionEffect called 0 returned 0% blocks executed 0%
        -:  754:void minionEffect(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state){
        -:  755:  int i, j;
        -:  756:  //+1 action
    #####:  757:  state->numActions++;
        -:  758:  
    #####:  759:  if (choice1){		//+2 coins
branch  0 never executed
branch  1 never executed
    #####:  760:    state->coins = state->coins + 2;
    #####:  761:  }
    #####:  762:  else if (choice2){		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  763:    //discard hand
    #####:  764:    while(numHandCards(state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  765:      discardCard(handPos, currentPlayer, state, 0);
        -:  766:    }
        -:  767:    //draw 4
    #####:  768:    for (i = 0; i < 4; i++){
branch  0 never executed
branch  1 never executed
    #####:  769:        drawCard(currentPlayer, state);
    #####:  770:    }	
        -:  771:    //other players discard hand and redraw if hand size > 4
    #####:  772:    for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  773:      if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  774:        if ( state->handCount[i] > 4 ){
branch  0 never executed
branch  1 never executed
        -:  775:          //discard hand
    #####:  776:          while( state->handCount[i] >= 0 ){      //***BUG: should be '> 0' & not '>= 0' ***//
branch  0 never executed
branch  1 never executed
    #####:  777:            discardCard(handPos, i, state, 0);
        -:  778:          }
        -:  779:          //draw 4
    #####:  780:          for (j = 0; j < 4; j++){
branch  0 never executed
branch  1 never executed
    #####:  781:            drawCard(i, state);
    #####:  782:          }
    #####:  783:        }
    #####:  784:      }
    #####:  785:    }
    #####:  786:  }
    #####:  787:}
        -:  788:
function villageEffect called 6 returned 100% blocks executed 100%
        -:  789:void villageEffect(int currentPlayer, int handPos, struct gameState* state){
        -:  790:  //+1 Card
        6:  791:  drawCard(currentPlayer, state);
        -:  792:  
        -:  793:  //+2 Actions
        6:  794:  state->numActions = state->numActions + 2;
        -:  795:  
        -:  796:  //discard played card from hand
        6:  797:  discardCard(handPos, currentPlayer, state, 0);
        6:  798:}
        -:  799:
        -:  800:
        -:  801:
function cardEffect called 256 returned 100% blocks executed 11%
        -:  802:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  803:{
        -:  804:  int i;
        -:  805:  int j;
        -:  806:  int k;
        -:  807:  int x;
        -:  808:  int index;
      256:  809:  int currentPlayer = whoseTurn(state);
      256:  810:  int nextPlayer = currentPlayer + 1;
        -:  811:
      256:  812:  int tributeRevealedCards[2] = {-1, -1};
        -:  813:  int temphand[MAX_HAND];// moved above the if statement
      256:  814:  int drawntreasure=0;
        -:  815:  int cardDrawn;
      256:  816:  int z = 0;// this is the counter for the temp hand
      256:  817:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  818:    nextPlayer = 0;
    #####:  819:  }
        -:  820:
        -:  821:  //uses switch to select card and perform actions
      256:  822:  switch( card ){
branch  0 taken 5%
branch  1 taken 1%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 49%
branch  7 taken 2%
branch  8 taken 0%
branch  9 taken 39%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 4%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  823:
        -:  824:    case adventurer:
       13:  825:      adventurerEffect(drawntreasure, currentPlayer, nextPlayer, state, temphand);
       13:  826:      return 0;
        -:  827:			
        -:  828:    case council_room:
        -:  829:      //+4 Cards
       10:  830:      for (i = 0; i < 4; i++){
branch  0 taken 80%
branch  1 taken 20%
        4:  831:        drawCard(currentPlayer, state);
        4:  832:      }
        -:  833:			
        -:  834:      //+1 Buy
        1:  835:      state->numBuys++;
        -:  836:			
        -:  837:      //Each other player draws a card
        6:  838:      for (i = 0; i < state->numPlayers; i++){
branch  0 taken 67%
branch  1 taken 33%
        2:  839:        if ( i != currentPlayer ){
branch  0 taken 50%
branch  1 taken 50%
        1:  840:            drawCard(i, state);
        1:  841:        }
        2:  842:	    }
        -:  843:			
        -:  844:      //put played card in played card pile
        1:  845:      discardCard(handPos, currentPlayer, state, 0);
        -:  846:			
        1:  847:      return 0;
        -:  848:			
        -:  849:    case feast:
        -:  850:      //gain card with cost up to 5
        -:  851:      //Backup hand
    #####:  852:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  853:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  854:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  855:      }
        -:  856:      //Backup hand
        -:  857:
        -:  858:      //Update Coins for Buy
    #####:  859:      updateCoins(currentPlayer, state, 5);
    #####:  860:      x = 1;//Condition to loop on
    #####:  861:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  862:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  863:	  if (DEBUG)
        -:  864:	    printf("None of that card left, sorry!\n");
        -:  865:
        -:  866:	  if (DEBUG){
        -:  867:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  868:	  }
    #####:  869:	}
    #####:  870:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  871:	  printf("That card is too expensive!\n");
        -:  872:
        -:  873:	  if (DEBUG){
        -:  874:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  875:	  }
    #####:  876:	}
        -:  877:	else{
        -:  878:
        -:  879:	  if (DEBUG){
        -:  880:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  881:	  }
        -:  882:
    #####:  883:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  884:	  x = 0;//No more buying cards
        -:  885:
        -:  886:	  if (DEBUG){
        -:  887:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  888:	  }
        -:  889:
        -:  890:	}
        -:  891:      }     
        -:  892:
        -:  893:      //Reset Hand
    #####:  894:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  895:	state->hand[currentPlayer][i] = temphand[i];
    #####:  896:	temphand[i] = -1;
    #####:  897:      }
        -:  898:      //Reset Hand
        -:  899:      			
    #####:  900:      return 0;
        -:  901:			
        -:  902:    case gardens:
    #####:  903:      return -1;
        -:  904:			
        -:  905:    case mine:
    #####:  906:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  907:
    #####:  908:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:		
    #####:  913:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  914:	{
    #####:  915:	  return -1;
        -:  916:	}
        -:  917:
    #####:  918:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  919:	{
    #####:  920:	  return -1;
        -:  921:	}
        -:  922:
    #####:  923:      gainCard(choice2, state, 2, currentPlayer);
        -:  924:
        -:  925:      //discard card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
        -:  927:
        -:  928:      //discard trashed card
    #####:  929:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  932:	    {
    #####:  933:	      discardCard(i, currentPlayer, state, 0);			
    #####:  934:	      break;
        -:  935:	    }
    #####:  936:	}
        -:  937:			
    #####:  938:      return 0;
        -:  939:			
        -:  940:    case remodel:
    #####:  941:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  942:
    #####:  943:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  944:	{
    #####:  945:	  return -1;
        -:  946:	}
        -:  947:
    #####:  948:      gainCard(choice2, state, 0, currentPlayer);
        -:  949:
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
        -:  952:
        -:  953:      //discard trashed card
    #####:  954:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  955:	{
    #####:  956:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  957:	    {
    #####:  958:	      discardCard(i, currentPlayer, state, 0);			
    #####:  959:	      break;
        -:  960:	    }
    #####:  961:	}
        -:  962:
        -:  963:
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case smithy:
      126:  967:      smithyEffect(currentPlayer, handPos, state);
      126:  968:      discardCard(handPos, currentPlayer, state, 0);
      126:  969:      return 0;
        -:  970:
        -:  971:    case village:
        6:  972:      villageEffect(currentPlayer, handPos, state);
        6:  973:      return 0;
        -:  974:		
        -:  975:    case baron:
    #####:  976:      baronEffect(choice1, currentPlayer, state);
    #####:  977:      discardCard(handPos, currentPlayer, state, 0);
    #####:  978:      return 0;
        -:  979:		
        -:  980:    case great_hall:
        -:  981:      //+1 Card
      101:  982:      drawCard(currentPlayer, state);
        -:  983:			
        -:  984:      //+1 Actions
      101:  985:      state->numActions++;
        -:  986:			
        -:  987:      //discard card from hand
      101:  988:      discardCard(handPos, currentPlayer, state, 0);
      101:  989:      return 0;
        -:  990:		
        -:  991:    case minion:
    #####:  992:      minionEffect(currentPlayer, choice1, choice2, handPos, state);
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 cards
    #####: 1000:	  drawCard(currentPlayer, state);
    #####: 1001:	  drawCard(currentPlayer, state);
    #####: 1002:	}
    #####: 1003:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
        -: 1005:	  //+2 coins
    #####: 1006:	  state->coins = state->coins + 2;
    #####: 1007:	}
        -: 1008:      else
        -: 1009:	{
        -: 1010:	  //trash 2 cards in hand
    #####: 1011:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1012:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1013:	}
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1021:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	  state->deckCount[nextPlayer]--;
    #####: 1024:	}
    #####: 1025:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:	  state->discardCount[nextPlayer]--;
    #####: 1028:	}
        -: 1029:	else{
        -: 1030:	  //No Card to Reveal
        -: 1031:	  if (DEBUG){
        -: 1032:	    printf("No cards to reveal\n");
        -: 1033:	  }
        -: 1034:	}
    #####: 1035:      }
        -: 1036:	    
        -: 1037:      else{
    #####: 1038:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:	    state->deckCount[nextPlayer]++;
    #####: 1042:	    state->discard[nextPlayer][i] = -1;
    #####: 1043:	    state->discardCount[nextPlayer]--;
    #####: 1044:	  }
        -: 1045:			    
    #####: 1046:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1047:	} 
    #####: 1048:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
    #####: 1051:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
        -: 1054:      }    
        -: 1055:		       
    #####: 1056:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1057:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:	state->playedCardCount++;
    #####: 1059:	tributeRevealedCards[1] = -1;
    #####: 1060:      }
        -: 1061:
    #####: 1062:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1064:	  state->coins += 2;
    #####: 1065:	}
        -: 1066:		    
    #####: 1067:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	  drawCard(currentPlayer, state);
    #####: 1070:	}
        -: 1071:	else{//Action Card
    #####: 1072:	  state->numActions = state->numActions + 2;
        -: 1073:	}
    #####: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
    #####: 1086:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:
    #####: 1091:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1094:	    {
    #####: 1095:	      j++;
    #####: 1096:	    }
    #####: 1097:	}
    #####: 1098:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
        -: 1103:      if (DEBUG) 
        -: 1104:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:      //increase supply count for choosen card by amount being discarded
    #####: 1107:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:			
        -: 1109:      //each other player gains a copy of revealed card
    #####: 1110:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1113:	    {
    #####: 1114:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1115:	    }
    #####: 1116:	}
        -: 1117:
        -: 1118:      //discard played card from hand
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1120:
        -: 1121:      //trash copies of cards returned to supply
    #####: 1122:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1127:		{
    #####: 1128:		  discardCard(i, currentPlayer, state, 1);
    #####: 1129:		  break;
        -: 1130:		}
    #####: 1131:	    }
    #####: 1132:	}			
        -: 1133:
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case cutpurse:
        9: 1137:      cutPurseEffect(currentPlayer, handPos, state);
        9: 1138:      return 0;
        -: 1139:
        -: 1140:		
        -: 1141:    case embargo: 
        -: 1142:      //+2 Coins
    #####: 1143:      state->coins = state->coins + 2;
        -: 1144:			
        -: 1145:      //see if selected pile is in play
    #####: 1146:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  return -1;
        -: 1149:	}
        -: 1150:			
        -: 1151:      //add embargo token to selected supply pile
    #####: 1152:      state->embargoTokens[choice1]++;
        -: 1153:			
        -: 1154:      //trash card
    #####: 1155:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case outpost:
        -: 1159:      //set outpost flag
    #####: 1160:      state->outpostPlayed++;
        -: 1161:			
        -: 1162:      //discard card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case salvager:
        -: 1167:      //+1 buy
    #####: 1168:      state->numBuys++;
        -: 1169:			
    #####: 1170:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1171:	{
        -: 1172:	  //gain coins equal to trashed card
    #####: 1173:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1174:	  //trash card
    #####: 1175:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1176:	}
        -: 1177:			
        -: 1178:      //discard card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case sea_hag:
    #####: 1183:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1184:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1185:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1186:	  state->discardCount[i]++;
    #####: 1187:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1188:	}
    #####: 1189:      }
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case treasure_map:
        -: 1193:      //search hand for another treasure_map
    #####: 1194:      index = -1;
    #####: 1195:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:	{
    #####: 1197:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1198:	    {
    #####: 1199:	      index = i;
    #####: 1200:	      break;
        -: 1201:	    }
    #####: 1202:	}
    #####: 1203:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
        -: 1205:	  //trash both treasure cards
    #####: 1206:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1207:	  discardCard(index, currentPlayer, state, 1);
        -: 1208:
        -: 1209:	  //gain 4 Gold cards
    #####: 1210:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1211:	    {
    #####: 1212:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1213:	    }
        -: 1214:				
        -: 1215:	  //return success
    #####: 1216:	  return 1;
        -: 1217:	}
        -: 1218:			
        -: 1219:      //no second treasure_map found in hand
    #####: 1220:      return -1;
        -: 1221:    }
        -: 1222:	
    #####: 1223:  return -1;
      256: 1224:}
        -: 1225:
function discardCard called 240 returned 100% blocks executed 90%
        -: 1226:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1227:{
        -: 1228:	
        -: 1229:  //if card is not trashed, added to Played pile 
      240: 1230:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1231:    {
        -: 1232:      //add card to played pile
      240: 1233:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      240: 1234:      state->playedCardCount++;
      240: 1235:    }
        -: 1236:	
        -: 1237:  //set played card to -1
      240: 1238:  state->hand[currentPlayer][handPos] = -1;
        -: 1239:	
        -: 1240:  //remove card from player's hand
      240: 1241:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1%
branch  1 taken 99%
        -: 1242:    {
        -: 1243:      //reduce number of cards in hand
        2: 1244:      state->handCount[currentPlayer]--;
        2: 1245:    }
      238: 1246:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1247:    {
        -: 1248:      //reduce number of cards in hand
    #####: 1249:      state->handCount[currentPlayer]--;
    #####: 1250:    }
        -: 1251:  else 	
        -: 1252:    {
        -: 1253:      //replace discarded card with last card in hand
      238: 1254:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1255:      //set last card to -1
      238: 1256:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1257:      //reduce number of cards in hand
      238: 1258:      state->handCount[currentPlayer]--;
        -: 1259:    }
        -: 1260:	
      240: 1261:  return 0;
        -: 1262:}
        -: 1263:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1264:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1265:{
        -: 1266:  //Note: supplyPos is enum of choosen card
        -: 1267:	
        -: 1268:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1269:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1270:    {
    #####: 1271:      return -1;
        -: 1272:    }
        -: 1273:	
        -: 1274:  //added card for [whoseTurn] current player:
        -: 1275:  // toFlag = 0 : add to discard
        -: 1276:  // toFlag = 1 : add to deck
        -: 1277:  // toFlag = 2 : add to hand
        -: 1278:
    #####: 1279:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1280:    {
    #####: 1281:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1282:      state->deckCount[player]++;
    #####: 1283:    }
    #####: 1284:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1285:    {
    #####: 1286:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1287:      state->handCount[player]++;
    #####: 1288:    }
        -: 1289:  else
        -: 1290:    {
    #####: 1291:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1292:      state->discardCount[player]++;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //decrease number in supply pile
    #####: 1296:  state->supplyCount[supplyPos]--;
        -: 1297:	 
    #####: 1298:  return 0;
    #####: 1299:}
        -: 1300:
function updateCoins called 281 returned 100% blocks executed 85%
        -: 1301:int updateCoins(int player, struct gameState *state, int bonus){
        -: 1302:  int i;
        -: 1303:	
        -: 1304:  //reset coin count
      281: 1305:  state->coins = 0;
        -: 1306:
        -: 1307:  //add coins for each Treasure card in player's hand
     3372: 1308:  for (i = 0; i < state->handCount[player]; i++){
branch  0 taken 83%
branch  1 taken 17%
     1405: 1309:    if (state->hand[player][i] == copper){
branch  0 taken 79%
branch  1 taken 21%
     1106: 1310:      state->coins += 1;
     1405: 1311:    } else if (state->hand[player][i] == silver){
branch  0 taken 0%
branch  1 taken 100%
    #####: 1312:      state->coins += 2;
      299: 1313:    } else if (state->hand[player][i] == gold){
branch  0 taken 0%
branch  1 taken 100%
    #####: 1314:        state->coins += 3;
    #####: 1315:    }	
     1405: 1316:  }	
        -: 1317:
        -: 1318:  //add bonus
      281: 1319:  state->coins += bonus;
        -: 1320:
      281: 1321:  return 0;
        -: 1322:}
        -: 1323:
        -: 1324:
        -: 1325://end of dominion.c
        -: 1326:
